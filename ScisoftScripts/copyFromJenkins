#!/bin/bash

# copy the artifacts from a Jenkins project

prog="${0##*/}"

usage()
{
cat <<EOF
USAGE: $prog [options] <project>
       $prog -h

OPTIONS

  -h - this help.
  -b <build_num> - e.g. 35 (default lastSuccessfulBuild). Mutually exclusive with -w.
  -d <dir>. Default copyBack.
  -E <cert> - Provide certificate file name to be passed through to curl for all operations.
            Use this to generate certificate file from cilogin.p12:
            openssl pkcs12 -in cilogin.p12 -out file.crt.pem -clcerts -nokeys
  -K <key> - Provide private file name to be passed through to curl for all operations.
            Use this to generate key file from cilogin.p12:
            openssl pkcs12 -in cilogin.p12 -out file.key.pem -nocerts -nodes
  -f <filter_regex> - filter results by (bash) regex.
  -t <build_type> - where build_type is all, debug, prof, or none (default debug & prof) -- repeatable.
  -M <var>=<val>[,<val>]+ - specify values for an arbitrary build matrix variable.
  -m <machine_type> - where machine_type is one of the types recognized by Jenkins:
       SLF5 SLF6 SLF7 OSX-10.9 OSX-10.10 OSX-10.11 OSX-10.12 OSX-10.13 OSX-10.14. Option is repeatable.
  -N - no clobber - do not overwrite existing file.
  -n <node_name> - fully qualified name such as buildservice007.fnal.gov (repeatable).
  -p <python_version> - specify PYVER if it used in the build matrix (e.g., v2_7_15a) (repeatable).
  -q <quals> - specify qualifiers if they are used in the build matrix (e.g., artdaq) (repeatable).
  -w - pull from workspace rather than artifacts area (need -E and -K). Mutually exclusive with -b.
  -V - print version and exit.

 NOTE: this script pulls the last successful build by default (see -b, -w for alternatives).
 The Jenkins project name (e.g., geant4-release-build) is required.
 if build type is not specified, both debug and prof will be copied
 if OS is not specified, the script will look for SLF6, SLF7, and OS_X
EOF
}

print_version()
{
  echo "$(basename ${0}) 5.00.00"
}

uniquify_var() {
  while (( $# )); do
    [ -n "$1" ] && eval "test -n \"\${$1[*]}\"" && \
      eval "$1=(\`printf \"%s\n\" \"\${$1[@]}\" | awk '!x[\$0]++'\`)"
    shift
  done
}

# Recursive function to generate combinatoric parameter set strings.
gen_pars() {
  (( $# == 0 )) && return
  local par=$1; shift
  eval local vals=("\${$par[@]}")
  local tmp_array=()
  for val in "${vals[@]}"; do
    [ "$val" != "none" ] || continue
    if (( ${#parsets[@]} )); then
      for parset in "${parsets[@]}"; do
        tmp_array+=("${parset}${par}=${val},")
      done
    else
      tmp_array+=("${par}=${val},")
    fi
  done
  (( ${#tmp_array[@]} )) && parsets=("${tmp_array[@]}")
  gen_pars "$@"
}

########################################################################
# Main
########################################################################

# Initialization.
declare -a have_swarm os_array mvars
dir_default=copyBack

# Parse command line arguments.
while getopts :b:d:E:K:f:t:M:m:Nn:p:q:hVw OPT; do
  case ${OPT} in
    b) build_num=$OPTARG; (( want_build_num = 1 ));;
    d) dir="$OPTARG";;
    E) cert_arg=(-E "${OPTARG}"); (( with_certs = 1 ));;
    f) filter_regex="$OPTARG";;
    h) usage; exit 1;;
    K) key_arg=(--key "${OPTARG}"); (( with_certs = 1 ));;
    M) mvars+=("${OPTARG%%=*}"); oIFS="${IFS}"; IFS=,
      eval "${OPTARG%%=*}+=(\${OPTARG#*=})"
      IFS="$oIFS";;
    [mn])
      case ${OPTARG} in
        OS[-_]X) os_array+=(OSX-10.1{1,2,3,4}); have_swarm+=(1);;
        slf*) os_array+=(SLF${OPTARG#slf}); have_swarm+=(1);;
        SLF*) os_array+=(${OPTARG}); have_swarm+=(1);;
        d*) os_array+=(OSX-10.$((${OPTARG#d} - 4))); have_swarm+=(1);;
        mac-10.*|OSX-10.*) os_array+=(${OPTARG/#mac/OSX})
          have_swarm+=(1);;
        *.gov|*.org|*.edu|*.com|*.[a-z][a-z]) # Node name
          os_array+=(${OPTARG})
          if [[ ${OPTARG} == *.fnal.gov ]]; then
            have_swarm+=(1)
          else
            have_swarm+=(0)
          fi;;
        *) echo "ERROR: Unrecognized argument to -${OPT}" 1>&2; exit 1
      esac;;
    N) (( no_clobber = 1 ));;
    p) mvars+=(PYVER); PVER+=($OPTARG);;
    q) mvars+=(QUAL); QUAL+=($OPTARG);;
    t) mvars+=(BUILDTYPE)
      case ${OPTARG} in
        debug|opt|prof|none) BUILDTYPE+=(${OPTARG});;
        all) BUILDTYPE+=(debug opt prof);;
        *) echo "ERROR: unrecognized build type ${OPTARG}" 1>&2; exit 1
      esac;;
    V) print_version; exit 1;;
    w) ((want_workspace=1));;
    *) usage; exit 1
  esac
done
shift `expr $OPTIND - 1`
OPTIND=1

! [ "${dir-UNSET}" = UNSET ] || ((want_workspace)) || dir=$dir_default
  
# Always print version.
print_version

if ((want_workspace)) && (( want_build_num)); then
  echo "ERROR: -b and -w are mutually exclusive" 1>&2
  exit 1
elif ((want_workspace)); then
  arena="ws"
elif ((want_build_num)); then
  arena="artifact"
else
  arena="lastSuccessfulBuild/artifact"
fi

##################
# Non-option arguments
project="${1}"
[ -n ${project} ] || \
  { echo "ERROR: please specify at least the release url" 1>&2; usage
  exit 1; }

##################
# Defaults
if (( ${#BUILDTYPE[@]} == 0 )); then
  echo "INFO: default to copying debug and prof artifacts"
  BUILDTYPE=(debug prof)
  mvars+=(BUILDTYPE)
fi

if ((${#os_array[@]} == 0)); then
  echo "INFO: default to copying artifacts for SLF and OSX"
  os_array=(SLF{6,7} OSX-10.1{1,2,3,4})
  # Horrible Bash trick to have an array filled with a "1" for every
  # element of os_array.
  have_swarm=($(printf "1\n%.0s" "${os_array[@]}"))
fi

for var in "${mvars[@]}"; do
  eval "(( \${#$var[@]} )) || $var=(none)"
done
##################

# Make arrays unique (unsorted).
uniquify_var mvars
uniquify_var "${mvars[@]}"

##################
# Parameter info.
echo "INFO: copy ${project}"
echo "    OS/Node: ${os_array[@]}"
for var in "${mvars[@]}"; do
  eval "echo \"    $var: \${$var[@]}\""
done
##################

##################
# Credentials.
base_cmd_args=(-k)
if (( ${with_certs:-0} )); then
  base_cmd_args+=("${cert_arg[@]}" "${key_arg[@]}")
  CRUMB=$(curl "${base_cmd_args[@]}" \
    "https://buildmaster.fnal.gov/buildmaster/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb)")
  base_cmd_args+=(-H"${CRUMB}")
fi
##################

(( os_count = 0 ))

# Generate a list of parameter set strings for insertion into a URL, and
# store in parsets.
gen_pars "${mvars[@]}"

# Obtain artifacts for each parameter set.
for OS in "${os_array[@]}"; do
  url_head="https://buildmaster.fnal.gov/buildmaster/job/${project}${build_num:+/${build_num}}/"
  if (( ${have_swarm[$((os_count++))]} )); then
    url_tail="label1=swarm,label2=${OS}"
  else
    url_tail="label1=${OS}"
  fi
  url_tail+="/${arena}/${dir:+$dir/}"
  (( ${#parsets[@]} )) || parsets=("")
  for parset in "${parsets[@]}"; do
    url="${url_head}${parset}${url_tail}"
    printf "\n> From ${url}"
    cmd_args=("${base_cmd_args[@]}" "${url}")
	  artifacts=(`curl "${cmd_args[@]}" |  sed -Ee 's&<&\n<&g' | sed -Ene 's&^<a href="([^"]+)">\1$&\1&p'`)
	  for artifact in "${artifacts[@]}"; do
      [[ -z "${filter_regex}" ]] || [[ "${artifact}" =~ ${filter_regex} ]] || continue
      echo "copy ${url}/${artifact}"
      cmd_args=("${base_cmd_args[@]}" -O "${url}/${artifact}")
      ! { (( ${no_clobber:-0} )) && [[ -f "${artifact}" ]] ; } && \
	      curl "${cmd_args[@]}"
	  done # Artifacts.
  done # Parameter sets.
done # Nodes / OS types.

echo
print_version
echo

exit 0
